--- a/src/modules/module-rt.c 
+++ b/src/modules/module-rt.c 
@@ -58,8 +58,10 @@
 #include <fcntl.h>
 #include <unistd.h>
 #include <pthread.h>
+#include <limits.h>
 #include <sys/resource.h>
 #include <sys/syscall.h>
+#include <sys/types.h>
 
 #include "config.h"
 
@@ -515,6 +517,53 @@ static const struct pw_impl_module_event
 };
 
 /**
+ * Check if the current user has permissions to lower the nice levels enough.
+ */
+static bool check_nice_level_privileges(int nice_level)
+{
+	struct rlimit rlim;
+	int lowest_nice_allowed;
+
+	/* On a POSIX system, the nice value of a thread can be lowered 1. by
+	 * the root user, 2. by a user with the CAP_SYS_NICE permission or
+	 * 3. by any user if the target value is within the range allowed by
+	 * RLIMIT_NICE.
+	 */
+
+	/* 1. Check for root user */
+	if (geteuid() == 0) {
+		return true;
+	}
+
+	/* 2. Skip checking the CAP_SYS_NICE permission because it would
+	 * require libcap.so.
+	 * 3. Check whether the target value is within the range allowed by
+	 * RLIMIT_NICE.
+	 *
+	 * NZERO should be defined in <limits.h> per POSIX, and should be at
+	 * least 20. (NZERO-1) is the highest possible niceness value
+	 * (i.e. lowest priority).
+	 * Most platforms use NZERO=20.
+	 *
+	 * RLIMIT_NICE tells us how much we can reduce niceness (increase
+	 * priority) if we start at NZERO. For example, if NZERO is 20 and the
+	 * rlimit is 30, we can lower niceness anywhere within the [-10, 19]
+	 * range (20 - 30 = -10).
+	 *
+	 * So, we are allowed to reduce niceness to a minimum of
+	 * NZERO - rlimit:
+	 */
+	if (getrlimit(RLIMIT_NICE, &rlim) != 0) {
+		return false;
+	}
+	lowest_nice_allowed = NZERO - (int)rlim.rlim_cur;
+	/* And lowering niceness to |nice_level| is allowed if it is greater
+	 * than or equal to the limit:
+	 */
+	return nice_level >= lowest_nice_allowed;
+}
+
+/**
  * Check if the current user has permissions to use realtime scheduling at the
  * specified priority.
  */
@@ -553,6 +602,17 @@ static bool check_realtime_privileges(rl
 	}
 }
 
+/**
+ * Check if the current user has sufficient permissions.
+ */
+static bool check_privileges(int nice_level, rlim_t priority)
+{
+	if (!check_nice_level_privileges(nice_level)) {
+		return false;
+	}
+	return check_realtime_privileges(priority);
+}
+
 static int sched_set_nice(int nice_level)
 {
 	if (setpriority(PRIO_PROCESS, _gettid(), nice_level) == 0)
@@ -878,7 +938,7 @@ static int should_use_rtkit(struct impl
 
 	/* If the user has permissions to use regular realtime scheduling, then
 	 * we'll use that instead of RTKit */
-	if (check_realtime_privileges(impl->rt_prio)) {
+	if (check_privileges(impl->nice_level, impl->rt_prio)) {
 		*use_rtkit = false;
 	} else {
 		if (!(*use_rtkit)) {
